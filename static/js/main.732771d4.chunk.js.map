{"version":3,"sources":["components/Scoreboard.js","components/Header.js","components/Gameboard.js","components/Character.js","components/CardWrapper.js","components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Scoreboard","props","react_default","a","createElement","className","score","personalBest","Header","Scoreboard_Scoreboard","Gameboard","Header_Header","Character","src","image","alt","alternative","charHead","CardWrapper","cardsBaseCase","capital","name","key","flag","punc","best","itemClicked","_useState","useState","_useState2","Object","slicedToArray","cards","modCards","cardArray","tempArr","tempCountry","useEffect","console","log","undefined","randomIndex","arr","toConsumableArray","currentIndex","length","Math","floor","random","_ref","Fragment","onClick","Axios","get","then","response","status","i","data","includes","push","_loop","_i","post","country","setTimeout","map","card","Character_Character","concat","Card","clicked","modClicked","_useState3","_useState4","modScore","_useState5","_useState6","modBest","num","App","Card_Card","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"+UAKe,SAASA,EAAYC,GAEhC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAI,UAAQH,EAAMK,OAClBJ,EAAAC,EAAAC,cAAA,UAAI,kBAAgBH,EAAMM,cAC1BL,EAAAC,EAAAC,cAAA,UAAI,kBCND,SAASI,EAAQP,GAE5B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAI,eACJF,EAAAC,EAAAC,cAACK,EAAU,CAACH,MAAOL,EAAMK,MAAOC,aAAcN,EAAMM,gBCPjD,SAASG,EAAUT,GAE9B,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACO,EAAM,CAACL,MAAOL,EAAMK,MAAOC,aAAcN,EAAMM,sBCHzC,SAASK,EAAWX,GAC/B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaQ,IAAKZ,EAAMa,MAAOC,IAAKd,EAAMe,eAE7Dd,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeJ,EAAMgB,wBCNpC,SAASC,EAAYjB,GAChC,IAAIkB,EAAgB,CAAC,CACjBC,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,IACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,KACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,KACLC,KAAM,GACNC,KAAM,IAEV,CACIJ,QAAS,GACTC,KAAM,GACNC,IAAK,KACLC,KAAM,GACNC,KAAM,KAGHlB,EAA4BL,EAA5BK,MAAOmB,EAAqBxB,EAArBwB,KAAMC,EAAezB,EAAfyB,YAAWC,EAELC,mBAAST,GAAcU,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA1CK,EAAKH,EAAA,GAAEI,EAAQJ,EAAA,GAClBK,EAAY,GAEZC,EAAU,GACVC,EAAc,GA8DlB,OAtBAC,oBAAU,WAGN,GAFAC,QAAQC,IAAI,kBAEKC,IAAdN,EAAwB,CAIvB,IAHA,IACgCO,EAD5BC,EAAIZ,OAAAa,EAAA,EAAAb,CAAIE,GACRY,EAAeF,EAAIG,OAEC,IAAjBD,GAAoB,CAGvBH,EAAcK,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,IAEA,IAAAK,EACwC,CACtCP,EAAID,GAAcC,EAAIE,IADvBF,EAAIE,GAAaK,EAAA,GAAEP,EAAID,GAAYQ,EAAA,GAGxChB,EAASS,GAEbJ,QAAQC,IAAI,mCACd,CAACjC,EAAOmB,IAGNvB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACAhD,EAAAC,EAAAC,cAAA,UAAQ+C,QA/DS,WACjBlB,EAASd,GACTiB,EAAc,GACdgB,IAAMC,IAAI,6DAA6DC,KACnE,SAACC,GACG,GAAwB,MAApBA,EAASC,OAAe,CAGxB,IAAI,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACvB,IAAIT,EAASF,KAAKC,MAAMD,KAAKE,SAAWO,EAASG,KAAKA,KAAKb,QACtDV,EAAQwB,SAASX,IAClBb,EAAQyB,KAAKZ,GAIrB,IADC,IAAAa,EAAA,SAAAC,GAEG1B,EAAYwB,KAAKL,EAASG,KAAKA,KAAKvB,EAAQsB,KAC5CrB,EAAYqB,GAAGnC,IAAMmC,EACrBL,IAAMW,KAAK,wDAAyD,CAChEC,QAAW5B,EAAYqB,GAAGpC,OAC3BiC,KAAK,SAAAC,GACJA,EAASG,KAAKA,KAAKtC,QAAUgB,EAAYqB,GAAGrC,QAAUmC,EAASG,KAAKA,KAAKtC,QAAWgB,EAAYqB,GAAGrC,QAAU,qBAC7GgB,EAAYqB,GAAGjC,KAAO,OAPtBiC,EAAI,EAAGA,EAAItB,EAAQU,OAAQY,IAAGI,EAAAC,GAe1CG,WAAW,WACP/B,EAAYE,EACZH,EAASG,IACV,QA8BoB/B,UAAU,WAAU,sBACnDH,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBAEd2B,EAAMkC,IAAI,SAACC,GAAI,OACZjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOiB,IAAK6C,EAAK7C,IAAK6B,QAAS,WAAOzB,EAAYyC,EAAK7C,OAC9DpB,EAAAC,EAAAC,cAACgE,EAAS,CAAE9C,IAAK6C,EAAK7C,IAAKR,MAAQqD,EAAK5C,KAAOP,YAAW,GAAAqD,OAAKF,EAAK/C,SAAOiD,OAAGF,EAAK3C,KAAI,KAAA6C,OAAIF,EAAK9C,MAAQJ,SAAQ,GAAAoD,OAAKF,EAAK/C,SAAOiD,OAAGF,EAAK3C,KAAI,KAAA6C,OAAIF,EAAK9C,aChK/J,SAASiD,EAAKrE,GAAM,IAAA0B,EACDC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAnC4C,EAAO1C,EAAA,GAAE2C,EAAU3C,EAAA,GAAA4C,EACA7C,mBAAS,GAAE8C,EAAA5C,OAAAC,EAAA,EAAAD,CAAA2C,EAAA,GAA9BnE,EAAKoE,EAAA,GAAEC,EAAQD,EAAA,GAAAE,EACUhD,mBAAS,GAAEiD,EAAA/C,OAAAC,EAAA,EAAAD,CAAA8C,EAAA,GAApCrE,EAAYsE,EAAA,GAAEC,EAAOD,EAAA,GAmB5B,OACA3E,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACIhD,EAAAC,EAAAC,cAACM,EAAS,CAACJ,MAAOA,EAAOC,aAAcA,IACvCL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACc,EAAW,CAACZ,MAAOA,EAAOmB,KAAMlB,EAAcmB,YArB/B,SAACqD,GAGjB,GAAIR,EAAQZ,SAASoB,GAMjBP,EAAW,IACRlE,EAAQC,GACPuE,EAAQxE,GAEZqE,EAAS,OAVa,CACtB,IAAIxC,EAAOL,OAAAa,EAAA,EAAAb,CAAOyC,GAClBpC,EAAQyB,KAAKmB,GACbP,EAAWrC,GACXwC,EAASrE,EAAQ,SCLd0E,MATf,WACE,OACE9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6E,EAAK,QCKGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAhC,KAAA+B,EAAAE,KAAA,UAAqBjC,KAAK,SAAAL,GAAiD,IAA9CuC,EAAMvC,EAANuC,OAAQC,EAAMxC,EAANwC,OAAQC,EAAMzC,EAANyC,OAAQC,EAAM1C,EAAN0C,OAAQC,EAAO3C,EAAP2C,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/F,EAAAC,EAAAC,cAACF,EAAAC,EAAM+F,WAAU,KACfhG,EAAAC,EAAAC,cAAC+F,EAAG,QAORjB","file":"static/js/main.732771d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Scoreboard.css';\r\n// This will be a scoreboard for current score/best score and max score we will need to track how many unique characters someone clicks \r\n// To track clicked possibly have a unique id for each card, each click we should check an array for that cards id and either end the game or add id to arr\r\n\r\nexport default function Scoreboard (props){\r\n    // pass on to props some state that tracks your score and the session best should be passed in from the component with all the cards in them \r\n    return(\r\n        <div className='scoreboard'>\r\n            <h4>Score: {props.score}</h4> \r\n            <h4>Personal Best: {props.personalBest}</h4>\r\n            <h4>Max: 12</h4>           \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Scoreboard from './Scoreboard';\r\nimport '../styles/Header.css';\r\n// Simply a header since scoreboard will be here we will need to pass state from another comp into props so we can pass to scoreboard\r\n\r\nexport default function Header (props){\r\n\r\n    return(\r\n        <div className='header'>\r\n            <h2>Memory Game</h2>\r\n            <Scoreboard score={props.score} personalBest={props.personalBest} />\r\n        </div>\r\n    )\r\n}","import Header from'./Header';\r\n\r\nimport React from 'react';\r\nexport default function Gameboard(props){\r\n    \r\n    return (\r\n    <div className=\"gameboard\">\r\n        <Header score={props.score} personalBest={props.personalBest} />\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\nimport '../styles/Character.css'\r\n// This function will be the character (image and name) we will nest each one inside styled cards\r\n\r\nexport default function Character (props){\r\n    return(\r\n        <div className='character-wrapper'>\r\n            <div className='image-wrapper'>\r\n                <img className='char-image' src={props.image} alt={props.alternative} />\r\n            </div>\r\n            <div>\r\n                <h3 className='char-header'>{props.charHead}</h3>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Character from './Character';\r\nimport '../styles/Card.css';\r\nimport Axios from 'axios';\r\n\r\nexport default function CardWrapper(props){\r\n    let cardsBaseCase = [{\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"1\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"2\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"3\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"4\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"5\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"6\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"7\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"8\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"9\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"10\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"11\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"12\",\r\n        flag: \"\",\r\n        punc: ''\r\n    }]\r\n\r\n    const {score, best, itemClicked} = props\r\n    \r\n    const [cards, modCards] = useState(cardsBaseCase)\r\n    let cardArray = [];\r\n    \r\n    let tempArr = [];\r\n    let tempCountry = [] \r\n    const getCountries = () => {\r\n        modCards(cardsBaseCase)\r\n        tempCountry = []\r\n        Axios.get(\"https://countriesnow.space/api/v0.1/countries/flag/images\").then(\r\n            (response) => {\r\n                if (response.status === 200){\r\n                     \r\n                    // Get countries name and thier flags\r\n                    for(let i = 0; i < 12; i++){\r\n                        let random = Math.floor(Math.random() * response.data.data.length)\r\n                        if (!tempArr.includes(random)){\r\n                            tempArr.push(random);\r\n                        }\r\n\r\n                    }\r\n                    for(let i = 0; i < tempArr.length; i++){\r\n                        tempCountry.push(response.data.data[tempArr[i]]);\r\n                        tempCountry[i].key = i;\r\n                        Axios.post('https://countriesnow.space/api/v0.1/countries/capital', {\r\n                            \"country\": tempCountry[i].name\r\n                        }).then(response => {\r\n                            response.data.data.capital ? tempCountry[i].capital = response.data.data.capital :  tempCountry[i].capital = \"No defined capital\";\r\n                            tempCountry[i].punc = \",\"\r\n                        })\r\n                    }\r\n                    // GET EXISTING COUNTRYS CAPITALS AND ADD TO COUNTRY ARR\r\n\r\n\r\n                            \r\n                }\r\n                setTimeout(() => {\r\n                    cardArray = tempCountry\r\n                    modCards(tempCountry)\r\n                }, 500)\r\n                 \r\n            })           \r\n    }\r\n    \r\n    \r\n    useEffect(() => {\r\n        console.log('useEffect')\r\n        \r\n        if(cardArray !== undefined){\r\n            let arr=[...cards];\r\n            let currentIndex = arr.length,  randomIndex;\r\n\r\n            while (currentIndex !== 0) {\r\n            \r\n                // Pick a remaining element.\r\n                randomIndex = Math.floor(Math.random() * currentIndex);\r\n                currentIndex--;\r\n            \r\n                // And swap it with the current element.\r\n                [arr[currentIndex], arr[randomIndex]] = [\r\n                  arr[randomIndex], arr[currentIndex]];\r\n            }\r\n            modCards(arr)\r\n        }\r\n        console.log('------------------------------')\r\n    },[score, best])\r\n    \r\n    return (\r\n        <>\r\n        <button onClick={getCountries} className='gen-btn'>Generate countries</button>\r\n        <section className='cards-wrapper'>\r\n            \r\n            {cards.map((card) =>(\r\n                <div className='card' key={card.key} onClick={() => {itemClicked(card.key)}}>\r\n                        <Character  key={card.key} image={ card.flag } alternative={`${card.capital}${card.punc} ${card.name}`} charHead={`${card.capital}${card.punc} ${card.name}`} />\r\n                </div>\r\n                )\r\n            )}\r\n        </section>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport '../styles/Card.css';\r\nimport Gameboard from './Gameboard';\r\nimport CardWrapper from './CardWrapper';\r\n// This function will mostly exist as a compainer that we will nest characters inside and style accordingly\r\n\r\nexport default function Card(props){\r\n    const [clicked, modClicked] = useState([]);\r\n    const [score, modScore] = useState(0)\r\n    const [personalBest, modBest] = useState(0);\r\n    \r\n    const itemClicked = (num) =>{\r\n        \r\n        \r\n        if(!clicked.includes(num)){\r\n            let tempArr = [...clicked]\r\n            tempArr.push(num)\r\n            modClicked(tempArr);\r\n            modScore(score + 1);\r\n        }else{\r\n            modClicked([])\r\n            if(score > personalBest){\r\n                modBest(score);\r\n            }\r\n            modScore(0)\r\n        }\r\n    }\r\n    \r\n    return(\r\n    <>\r\n        <Gameboard score={score} personalBest={personalBest} />\r\n        <div>\r\n        <CardWrapper score={score} best={personalBest} itemClicked={itemClicked}/>\r\n        </div>\r\n    </>\r\n    )\r\n}","import './App.css';\nimport Cards from './components/Card';\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cards />\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}