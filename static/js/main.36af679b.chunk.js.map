{"version":3,"sources":["components/Scoreboard.js","components/Header.js","components/Gameboard.js","components/Character.js","components/CardWrapper.js","components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Scoreboard","props","react_default","a","createElement","className","score","personalBest","Header","Scoreboard_Scoreboard","Gameboard","Header_Header","Character","src","image","alt","alternative","charHead","CardWrapper","cardsBaseCase","capital","name","key","flag","punc","best","itemClicked","_useState","useState","_useState2","Object","slicedToArray","cards","modCards","cardArray","tempArr","tempCountry","getCountries","Axios","get","then","response","status","i","random","Math","floor","data","length","includes","push","console","log","_loop","_i","post","country","setTimeout","useEffect","undefined","randomIndex","arr","toConsumableArray","currentIndex","_ref","Fragment","onClick","map","card","Character_Character","concat","Card","clicked","modClicked","_useState3","_useState4","modScore","_useState5","_useState6","modBest","num","App","Card_Card","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.36af679b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Scoreboard.css';\r\n// This will be a scoreboard for current score/best score and max score we will need to track how many unique characters someone clicks \r\n// To track clicked possibly have a unique id for each card, each click we should check an array for that cards id and either end the game or add id to arr\r\n\r\nexport default function Scoreboard (props){\r\n    // pass on to props some state that tracks your score and the session best should be passed in from the component with all the cards in them \r\n    return(\r\n        <div className='scoreboard'>\r\n            <h4>Score: {props.score}</h4> \r\n            <h4>Personal Best: {props.personalBest}</h4>\r\n            <h4>Max: 12</h4>           \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Scoreboard from './Scoreboard';\r\nimport '../styles/Header.css';\r\n// Simply a header since scoreboard will be here we will need to pass state from another comp into props so we can pass to scoreboard\r\n\r\nexport default function Header (props){\r\n\r\n    return(\r\n        <div className='header'>\r\n            <h2>Memory Game</h2>\r\n            <Scoreboard score={props.score} personalBest={props.personalBest} />\r\n        </div>\r\n    )\r\n}","import Header from'./Header';\r\n\r\nimport React from 'react';\r\nexport default function Gameboard(props){\r\n    \r\n    return (\r\n    <div className=\"gameboard\">\r\n        <Header score={props.score} personalBest={props.personalBest} />\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\nimport '../styles/Character.css'\r\n// This function will be the character (image and name) we will nest each one inside styled cards\r\n\r\nexport default function Character (props){\r\n    return(\r\n        <div className='character-wrapper'>\r\n            <div className='image-wrapper'>\r\n                <img className='char-image' src={props.image} alt={props.alternative} />\r\n            </div>\r\n            <div>\r\n                <h3 className='char-header'>{props.charHead}</h3>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Character from './Character';\r\nimport '../styles/Card.css';\r\nimport Axios from 'axios';\r\n\r\nexport default function CardWrapper(props){\r\n    let cardsBaseCase = [{\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"1\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"2\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"3\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"4\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"5\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"6\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"7\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"8\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"9\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"10\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"11\",\r\n        flag: \"\",\r\n        punc: ''\r\n    },\r\n    {\r\n        capital: \"\",\r\n        name: \"\",\r\n        key: \"12\",\r\n        flag: \"\",\r\n        punc: ''\r\n    }]\r\n\r\n    const {score, best, itemClicked} = props\r\n    \r\n    const [cards, modCards] = useState(cardsBaseCase)\r\n    let cardArray = [];\r\n    \r\n    let tempArr = [];\r\n    let tempCountry = [];\r\n    const getCountries = () => {\r\n        modCards(cardsBaseCase)\r\n        Axios.get(\"https://countriesnow.space/api/v0.1/countries/flag/images\").then(\r\n            (response) => {\r\n                if (response.status === 200){\r\n                    tempArr = [];\r\n                    // Get countries name and thier flags\r\n                    for(let i = 0; i < 12; i++){\r\n                        let random = Math.floor(Math.random() * response.data.data.length)\r\n                        if (!tempArr.includes(random)){\r\n                            tempArr.push(random);\r\n                        }\r\n\r\n                    }\r\n                    console.log(tempArr)\r\n                    tempCountry = [];\r\n                    for(let i = 0; i < tempArr.length; i++){\r\n                        tempCountry.push(response.data.data[tempArr[i]]);\r\n                        tempCountry[i].key = i;\r\n                        Axios.post('https://countriesnow.space/api/v0.1/countries/capital', {\r\n                            \"country\": tempCountry[i].name\r\n                        }).then(response => {\r\n                            response.data.data.capital ? tempCountry[i].capital = response.data.data.capital :  tempCountry[i].capital = \"No defined capital\";\r\n                            tempCountry[i].punc = \",\"\r\n                            if (i === tempArr.length - 1){\r\n                                setTimeout(() => {\r\n                                    console.log(tempCountry)\r\n                                    cardArray = tempCountry\r\n                                    modCards(tempCountry)\r\n                                }, 100)\r\n                                \r\n                            }\r\n                        })\r\n                    }\r\n                }                \r\n            })\r\n            console.log('------------------------------')           \r\n    }\r\n    \r\n    \r\n    useEffect(() => {\r\n        console.log('useEffect')\r\n        \r\n        if(cardArray !== undefined){\r\n            let arr=[...cards];\r\n            let currentIndex = arr.length,  randomIndex;\r\n\r\n            while (currentIndex !== 0) {\r\n            \r\n                // Pick a remaining element.\r\n                randomIndex = Math.floor(Math.random() * currentIndex);\r\n                currentIndex--;\r\n            \r\n                // And swap it with the current element.\r\n                [arr[currentIndex], arr[randomIndex]] = [\r\n                  arr[randomIndex], arr[currentIndex]];\r\n            }\r\n            modCards(arr)\r\n        }\r\n        console.log('------------------------------')\r\n    },[score, best])\r\n    useEffect(() => {\r\n        console.log('Mount')\r\n        getCountries()\r\n        console.log('------------------------------')\r\n    },[])\r\n    return (\r\n        <>\r\n        <button onClick={getCountries} className='gen-btn'>Generate countries</button>\r\n        <section className='cards-wrapper'>\r\n            \r\n            {cards.map((card) =>(\r\n                <div className='card' key={card.key} onClick={() => {itemClicked(card.key)}}>\r\n                        <Character  key={card.key} image={ card.flag } alternative={`${card.capital}${card.punc} ${card.name}`} charHead={`${card.capital}${card.punc} ${card.name}`} />\r\n                </div>\r\n                )\r\n            )}\r\n        </section>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport '../styles/Card.css';\r\nimport Gameboard from './Gameboard';\r\nimport CardWrapper from './CardWrapper';\r\n// This function will mostly exist as a compainer that we will nest characters inside and style accordingly\r\n\r\nexport default function Card(props){\r\n    const [clicked, modClicked] = useState([]);\r\n    const [score, modScore] = useState(0)\r\n    const [personalBest, modBest] = useState(0);\r\n    \r\n    const itemClicked = (num) =>{\r\n        \r\n        \r\n        if(!clicked.includes(num)){\r\n            let tempArr = [...clicked]\r\n            tempArr.push(num)\r\n            modClicked(tempArr);\r\n            modScore(score + 1);\r\n        }else{\r\n            modClicked([])\r\n            if(score > personalBest){\r\n                modBest(score);\r\n            }\r\n            modScore(0)\r\n        }\r\n    }\r\n    \r\n    return(\r\n    <>\r\n        <Gameboard score={score} personalBest={personalBest} />\r\n        <div>\r\n        <CardWrapper score={score} best={personalBest} itemClicked={itemClicked}/>\r\n        </div>\r\n    </>\r\n    )\r\n}","import './App.css';\nimport Cards from './components/Card';\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cards />\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}