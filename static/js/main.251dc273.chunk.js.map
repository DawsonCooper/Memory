{"version":3,"sources":["components/Scoreboard.js","components/Menu/MenuContent.js","components/Menu/Menu.js","components/Header.js","components/Gameboard.js","components/Character.js","components/CardWrapper.js","components/Card.js","App.js","components/MemorySort/SortCharacter.js","components/MemorySort/FinishModal.js","components/MemorySort/LostModal.js","components/MemorySort/SortHeader.js","components/MemorySort/Sort.js","RouteSwitch.js","reportWebVitals.js","index.js"],"names":["Scoreboard","props","react_default","a","createElement","className","score","personalBest","MenuContent","onClick","modMenu","xmlns","width","height","fill","viewBox","d","dist","to","Menu","_useState","useState","_useState2","Object","slicedToArray","menu","setMenu","MenuContent_MenuContent","fill-rule","Header","Scoreboard_Scoreboard","Gameboard","Header_Header","Character","src","image","alt","alternative","charHead","CardWrapper","cardsBaseCase","capital","name","key","flag","punc","best","itemClicked","cards","setCards","cardArray","useEffect","console","log","undefined","randomIndex","arr","toConsumableArray","currentIndex","length","Math","floor","random","_ref","getCountries","tempArr","tempCountry","getCapitals","i","Axios","post","country","then","response","data","setTimeout","catch","error","get","status","includes","push","Fragment","map","card","Character_Character","concat","Card","clicked","modClicked","_useState3","_useState4","modScore","_useState5","_useState6","modBest","num","App","Card_Card","SortChar","FinishModal","role","id","type","closeModal","aria-label","aria-hidden","restart","SortHeader","newCards","ogOrder","shuffle","winStatus","setWinStatus","lossStatus","setLossStatus","e","data-toggle","data-target","forEach","index","LostModal_FinishModal","MemorySortComponent","setOgOrder","setNewCards","target","nextSibling","classList","remove","add","react_beautiful_dnd_esm","onDragEnd","result","destination","items","Array","from","_items$splice","splice","source","reorderedItem","droppableId","provided","assign","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","RouteSwitch","react_router_dist","path","element","src_App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_RouteSwitch"],"mappings":"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","file":"static/js/main.251dc273.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Scoreboard.css';\n// This will be a scoreboard for current score/best score and max score we will need to track how many unique characters someone clicks \n// To track clicked possibly have a unique id for each card, each click we should check an array for that cards id and either end the game or add id to arr\n\nexport default function Scoreboard (props){\n    // pass on to props some state that tracks your score and the session best should be passed in from the component with all the cards in them \n    return(\n        <div className='scoreboard'>\n            <h4>Score: {props.score}</h4> \n            <h4>Personal Best: {props.personalBest}</h4>\n            <h4>Max: 12</h4>           \n        </div>\n    )\n}","import React from 'react';\r\nimport '../../styles/Menu/MenuContent.css';\r\nimport { Link } from 'react-router-dom'\r\n// This component should have the content we want for out navigation menu mainly out links back and forth between pages \r\n// We will likely need some conditional rendering to see which page we are currenly on do disable or hide nav links to the page we are already on\r\n\r\nexport default function MenuContent(props){\r\n\r\n    return (\r\n\r\n            <div className='menu-container'>\r\n            <div className='menu-header'>\r\n                <h1>Games</h1>\r\n                <svg onClick={props.modMenu} xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" className=\"bi bi-backspace-fill\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M15.683 3a2 2 0 0 0-2-2h-7.08a2 2 0 0 0-1.519.698L.241 7.35a1 1 0 0 0 0 1.302l4.843 5.65A2 2 0 0 0 6.603 15h7.08a2 2 0 0 0 2-2V3zM5.829 5.854a.5.5 0 1 1 .707-.708l2.147 2.147 2.146-2.147a.5.5 0 1 1 .707.708L9.39 8l2.146 2.146a.5.5 0 0 1-.707.708L8.683 8.707l-2.147 2.147a.5.5 0 0 1-.707-.708L7.976 8 5.829 5.854z\"/>\r\n                </svg>\r\n            </div>\r\n            <Link to='/'>\r\n                <div className='mb-2'>Memory Shuffle</div>\r\n            </Link>\r\n            <Link to='/sort'>\r\n                <div>Memory Sort</div>\r\n            </Link>\r\n            </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport MenuContent from './MenuContent';\r\n// This componenet should be a clickable svg or boxicon that when clicked will open up a menucontent componenet\r\nexport default function Menu(props){\r\n    const [menu, setMenu] = useState()\r\n    \r\n    function modMenu(){\r\n        setMenu(!menu)\r\n    }\r\n\r\n    if(menu){\r\n        return(\r\n            <MenuContent modMenu={modMenu} />\r\n        )\r\n    }else{\r\n        return(\r\n            <svg onClick={modMenu} xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" className=\"bi bi-list menu-icon\" viewBox=\"0 0 16 16\">\r\n                <path fill-rule=\"evenodd\" d=\"M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z\"/>\r\n            </svg>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Scoreboard from './Scoreboard';\r\nimport '../styles/Header.css';\r\nimport Menu from './Menu/Menu'\r\n// Simply a header since scoreboard will be here we will need to pass state from another comp into props so we can pass to scoreboard\r\n\r\nexport default function Header (props){\r\n\r\n    return(\r\n        <div className='header'>\r\n            <div className='top-row'>\r\n                <h2 >Memory Game</h2>\r\n                <div className='menu-button'><Menu /></div>\r\n            </div>\r\n            <Scoreboard score={props.score} personalBest={props.personalBest} />\r\n        </div>\r\n    )\r\n}","import Header from'./Header';\n\nimport React from 'react';\nexport default function Gameboard(props){\n    \n    return (\n    <div className=\"gameboard\">\n        <Header score={props.score} personalBest={props.personalBest} />\n    </div>\n    )\n}","import React from 'react';\nimport '../styles/Character.css'\n// This function will be the character (image and name) we will nest each one inside styled cards\n\nexport default function Character (props){\n    return(\n        <div className='character-wrapper'>\n            <div className='image-wrapper'>\n                <img className='char-image' src={props.image} alt={props.alternative} />\n            </div>\n            <div>\n                <h3 className='char-header'>{props.charHead}</h3>\n            </div>\n            \n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport Character from './Character';\nimport '../styles/Card.css';\nimport Axios from 'axios';\n\nexport default function CardWrapper(props){\n    let cardsBaseCase = [{\n        capital: \"\",\n        name: \"\",\n        key: \"1\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"2\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"3\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"4\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"5\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"6\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"7\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"8\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"9\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"10\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"11\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"12\",\n        flag: \"\",\n        punc: ''\n    }]\n\n    const {score, best, itemClicked} = props\n    \n    const [cards, setCards] = useState(cardsBaseCase)\n    let cardArray = [];\n    useEffect(() => {\n        console.log('useEffect')\n        \n        if(cardArray !== undefined){\n            let arr=[...cards];\n            let currentIndex = arr.length,  randomIndex;\n\n            while (currentIndex !== 0) {\n            \n                // Pick a remaining element.\n                randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex--;\n            \n                // And swap it with the current element.\n                [arr[currentIndex], arr[randomIndex]] = [\n                  arr[randomIndex], arr[currentIndex]];\n            }\n            setCards(arr)\n        }\n        console.log('------------------------------')\n    },[score, best])\n    useEffect(() => {\n        console.log('Mount')\n        getCountries()\n        console.log('------------------------------')\n    },[])\n    let tempArr = [];\n    let tempCountry = [];\n    function getCapitals(i) {\n        Axios.post('https://countriesnow.space/api/v0.1/countries/capital', {\n                \"country\": tempCountry[i].name\n            }).then(response => {\n                response.data.data.capital ? tempCountry[i].capital = response.data.data.capital :  tempCountry[i].capital = \"No defined capital\";\n                tempCountry[i].punc = \",\"\n                if (i === tempArr.length - 1){\n                    setTimeout(() => {\n                        console.log(tempCountry)\n                        cardArray = tempCountry\n                        setCards(tempCountry)\n                    }, 100)\n                    \n                }\n            }).catch(error => {console.log(error)});\n    }\n    const getCountries = () => {\n        setCards(cardsBaseCase)\n        Axios.get(\"https://countriesnow.space/api/v0.1/countries/flag/images\").then(\n            (response) => {\n                if (response.status === 200){\n                    tempArr = [];\n                    // Get countries name and thier flags\n                    for(let i = 0; i < 12; i++){\n                        let random = Math.floor(Math.random() * response.data.data.length)\n                        if (!tempArr.includes(random)){\n                            tempArr.push(random);\n                        }\n                        \n                    }\n                    console.log(tempArr)\n                    tempCountry = [];\n                    for(let i = 0; i < tempArr.length; i++){\n                        tempCountry.push(response.data.data[tempArr[i]]);\n                        tempCountry[i].key = i;\n                        getCapitals(i)\n                    }\n                }                \n            })\n            console.log('------------------------------')           \n    }\n    \n    \n    \n    return (\n        <>\n        <button onClick={getCountries} className='cust-btn'>Generate countries</button>\n        <section className='cards-wrapper'>\n            \n            {cards.map((card) =>(\n                <div className='memory-card' key={card.key} onClick={() => {itemClicked(card.key)}}>\n                        <Character  key={card.key} image={ card.flag } alternative={`${card.capital}${card.punc} ${card.name}`} charHead={`${card.capital}${card.punc} ${card.name}`} />\n                </div>\n                )\n            )}\n        </section>\n        </>\n    )\n}","import React, { useState } from 'react';\nimport '../styles/Card.css';\nimport Gameboard from './Gameboard';\nimport CardWrapper from './CardWrapper';\n// This function will mostly exist as a compainer that we will nest characters inside and style accordingly\n\nexport default function Card(props){\n    const [clicked, modClicked] = useState([]);\n    const [score, modScore] = useState(0)\n    const [personalBest, modBest] = useState(0);\n    \n    const itemClicked = (num) =>{\n        \n        \n        if(!clicked.includes(num)){\n            let tempArr = [...clicked]\n            tempArr.push(num)\n            modClicked(tempArr);\n            modScore(score + 1);\n        }else{\n            modClicked([])\n            if(score > personalBest){\n                modBest(score);\n            }\n            modScore(0)\n        }\n    }\n    \n    return(\n    <>\n        <Gameboard score={score} personalBest={personalBest} />\n        <div>\n        <CardWrapper score={score} best={personalBest} itemClicked={itemClicked}/>\n        </div>\n    </>\n    )\n}","import './App.css';\nimport Cards from './components/Card';\nimport React from 'react';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cards />\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport '../../styles/MemorySortStyles/sortchar.css';\n\nexport default function SortChar(props){\n    return (\n        <div className='sort-character-wrapper'>\n            <div className='sort-image-wrapper'>\n                <img className='sort-char-image' src={props.image} alt={props.alternative} />\n            </div>\n            <div>\n                <h3 className='sort-char-header'>{props.charHead}</h3>\n            </div>\n            \n        </div>\n    )\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../../styles/MemorySortStyles/finishModal.css'\nexport default function FinishModal(props){\n\n    return (\n        <div className={`win-modal ${props.status}`} role=\"dialog\" >\n            <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n              <div className=\"modal-content cust-modal\">\n                <div className=\"modal-header\">\n                  <h5 id=\"exampleModalLongTitle\">You Won!</h5>\n                  <button type=\"button\" className=\"modal-btn\" onClick={props.closeModal} aria-label=\"Close\">\n                    <span aria-hidden=\"true\">x</span>\n                  </button>\n                </div>\n                <div className=\"modal-body\">\n                  You sorted the countries in the right order!\n                </div>\n                <div className=\"modal-footer\">\n                  <button type=\"button\" className=\"modal-btn\" onClick={() => \n                  {\n                    props.closeModal();\n                    props.restart();\n                  }} >Restart</button>\n                </div>\n              </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../../styles/MemorySortStyles/finishModal.css'\nexport default function FinishModal(props){\n    return (\n        <div className={`lost-modal ${props.status}`} role=\"dialog\" >\n            <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n              <div className=\"modal-content cust-modal\">\n                <div className=\"modal-header text-center\">\n                  <h5 id=\"exampleModalLongTitle\">You Lost!</h5>\n                  <button type=\"button\" className=\"modal-btn\"  onClick={props.closeModal} aria-label=\"Close\">\n                    <span>x</span>\n                  </button>\n                </div>\n                <div className=\"modal-body\">\n                  You did not order the countries correctly!\n                </div>\n                <div className=\"modal-footer\">\n                  <button type=\"button\" className=\"modal-btn\"  onClick={() => \n                  {\n                    props.closeModal();\n                    props.restart();\n                  }}  >Restart</button>\n                </div>\n              </div>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport FinishModal from './FinishModal';\nimport LostModal from './LostModal';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Menu from '../Menu/Menu';\nimport '../../styles/Menu/MenuContent.css';\nexport default function SortHeader(props) {\n    const {newCards, ogOrder, shuffle} = props;\n    const [winStatus, setWinStatus] = useState('off');\n    const [lossStatus, setLossStatus] = useState('off');\n    function checkwinStatus(){\n        setWinStatus('win')\n        console.log({newCards});\n        console.log({ogOrder});\n        newCards.forEach((card, index)=>{\n            if (card.key !== ogOrder[index].key){\n                setWinStatus(\"off\")\n                setLossStatus(\"lost\")\n            }\n        })\n        \n        console.log(winStatus)\n    }\n    function closeModal(){\n        setWinStatus('off')\n        setLossStatus(\"off\")\n    }\n    return(\n        <div className='sort-header d-flex flex-column align-items-center mb-3'>\n            <h2 className=\"memory-sort-header mb-2\">Memory Sort</h2>\n            <Menu />\n            <div className='sort-btn-container text-center'>\n                <button className=\"shuffle-cards cust-btn\" onClick={(e) => shuffle(e)}>Start</button>\n                <button className='submit-cards off cust-btn' data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={checkwinStatus}>Finished!</button>\n            </div>\n            <FinishModal restart={props.restart} closeModal={closeModal} status={winStatus}/>\n            <LostModal restart={props.restart} closeModal={closeModal} status={lossStatus}/>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport '../../styles/MemorySortStyles/sort.css';\nimport SortChar from \"./SortCharacter\";\nimport { DragDropContext, Droppable , Draggable } from 'react-beautiful-dnd'\nimport SortHeader from \"./SortHeader\";\nexport default function MemorySortComponent(props) {\n    const [cards, setCards] = useState([{}]);\n    const [ogOrder, setOgOrder] = useState([]);\n    const [newCards, setNewCards] = useState([{}]);\n    let cardsBaseCase = [{\n        capital: \"\",\n        name: \"\",\n        key: \"1\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"2\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"3\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"4\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"5\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"6\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"7\",\n        flag: \"\",\n        punc: ''\n    },\n    {\n        capital: \"\",\n        name: \"\",\n        key: \"8\",\n        flag: \"\",\n        punc: ''\n    }];\n    let tempArr = [];\n    let tempCountry = [];\n    useEffect(() => {\n        console.log('Mount')\n        getCountries()\n        console.log('------------------------------')\n    },[])\n    function getCapitals(i) {\n        Axios.post('https://countriesnow.space/api/v0.1/countries/capital', {\n                \"country\": tempCountry[i].name\n            }).then(response => {\n                response.data.data.capital ? tempCountry[i].capital = response.data.data.capital :  tempCountry[i].capital = \"None\";\n                tempCountry[i].punc = \",\"\n                if (i === tempArr.length - 1){\n                    setTimeout(() => {\n                        console.log(tempCountry)\n                        setCards(tempCountry)\n                    }, 100)\n                    \n                }\n            }).catch(error => {console.log(error)});\n    }\n    const getCountries = () => {\n        setCards(cardsBaseCase)\n        Axios.get(\"https://countriesnow.space/api/v0.1/countries/flag/images\").then(\n            (response) => {\n                if (response.status === 200){\n                    tempArr = [];\n                    // Get countries name and thier flags\n                    for(let i = 0; i < 8; i++){\n                        let random = Math.floor(Math.random() * response.data.data.length)\n                        if (!tempArr.includes(random)){\n                            tempArr.push(random);\n                        }\n                        \n                    }\n                    console.log(tempArr)\n                    tempCountry = [];\n                    for(let i = 0; i < tempArr.length; i++){\n                        tempCountry.push(response.data.data[tempArr[i]]);\n                        tempCountry[i].key = i;\n                        getCapitals(i)\n                    }\n                }                \n            })\n            console.log('------------------------------')           \n    }\n\n    function shuffle(e) {\n        \n        e.target.nextSibling.classList.remove('off')\n        e.target.classList.add('off')\n        setOgOrder(cards);\n        if(cards !== undefined){\n            let arr=[...cards];\n                let currentIndex = arr.length,  randomIndex;\n\n                while (currentIndex !== 0) {\n                \n                    // Pick a remaining element.\n                    randomIndex = Math.floor(Math.random() * currentIndex);\n                    currentIndex--;\n                \n                    // And swap it with the current element.\n                    [arr[currentIndex], arr[randomIndex]] = [\n                      arr[randomIndex], arr[currentIndex]];\n                }\n                setCards(arr);\n                \n        }\n    }\n    function handleOnDragEnd(result){\n        console.log(result);\n        if (!result.destination) return;\n\n        const items = Array.from(cards);\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n        setCards(items)\n        setNewCards(items)\n    }\n\n    return (\n        <div className=\"memory-sort-container\">\n            <div className={'memory-sort-header'} >\n            <SortHeader restart={getCountries} shuffle={shuffle} newCards={newCards} ogOrder={ogOrder} />\n            </div>\n            <DragDropContext onDragEnd={handleOnDragEnd}>\n                <Droppable droppableId='grid-cell-sort'>\n                    {(provided) => \n                    (\n                        \n                            <ul {...provided.droppableProps} ref={provided.innerRef} className='grid-sort' >\n                            {cards.map((card, index) => {\n                                return(\n                                    <Draggable key={card.key} draggableId={`${card.key}`} index={index}>\n                                        {(provided) => (\n                                            <div className='grid-cell-sort' key={card.key + 1} {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\n                                                <SortChar  key={card.key + 2} image={ card.flag } alternative={`${card.capital}${card.punc} ${card.name}`} charHead={`${card.capital}${card.punc} ${card.name}`} />\n                                            </div> \n                                        )}\n                                         \n                                    </Draggable>\n                                )\n                                \n                                }\n                            )}\n                            {provided.placeholder}\n                            </ul>\n                    )\n                }\n                    \n                </Droppable>\n            </DragDropContext>\n\n        </div>\n    )\n}","import React from \"react\";\r\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport MemorySortComponent from \"./components/MemorySort/Sort\";\r\n\r\nconst RouteSwitch = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<App />} />\r\n        <Route path=\"/sort\" element={<MemorySortComponent />} />\r\n      </Routes>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default RouteSwitch;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport RouteSwitch from \"./RouteSwitch\";\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n//import App from \"./App\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n        <RouteSwitch />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}